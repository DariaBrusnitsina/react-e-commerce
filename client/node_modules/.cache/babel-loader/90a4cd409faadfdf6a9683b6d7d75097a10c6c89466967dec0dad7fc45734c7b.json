{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport isOutdated from \"../utils/isOutdated\";\nimport categoriesService from \"../services/categories.service\";\nimport itemsService from \"../services/items.service\";\nconst categoriesSlice = createSlice({\n  name: \"categories\",\n  initialState: {\n    entities: null,\n    isLoading: true,\n    error: null,\n    lastFetch: null\n  },\n  reducers: {\n    categoriesRequested: state => {\n      state.isLoading = true;\n    },\n    categoriesReceived: (state, action) => {\n      state.entities = action.payload;\n      state.lastFetch = Date.now();\n      state.isLoading = false;\n    },\n    categoriesRequestFiled: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    },\n    categoryUpdateRequest: state => {},\n    categoryUpdateReceived: (state, action) => {\n      const index = state.entities.findIndex(i => i._id === action.payload._id);\n      state.entities[index] = {\n        ...state.entities[index],\n        ...action.payload\n      };\n    },\n    categoryUpdateRequestFailed: (state, action) => {\n      state.error = action.payload;\n    },\n    categoryDeleteRequested: state => {},\n    categoryDeleted: (state, action) => {\n      state.entities = state.entities.filter(i => i._id !== action.payload);\n    },\n    categoryDeleteRequestFailed: (state, action) => {\n      state.error = action.payload;\n    },\n    categoryCreateRequested: state => {},\n    categoryCreateReceived: (state, action) => {\n      if (!Array.isArray(state.entities)) {\n        state.entities = [];\n      }\n      state.entities.push(action.payload);\n    },\n    categoryCreateRequestFailed: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n});\nconst {\n  reducer: categoriesReducer,\n  actions\n} = categoriesSlice;\nconst {\n  categoriesRequested,\n  categoriesReceived,\n  categoriesRequestFiled,\n  categoryUpdateRequest,\n  categoryUpdateReceived,\n  categoryUpdateRequestFailed,\n  categoryDeleteRequested,\n  categoryDeleted,\n  categoryDeleteRequestFailed,\n  categoryCreateRequested,\n  categoryCreateReceived,\n  categoryCreateRequestFailed\n} = actions;\nexport const loadCategoriesList = () => async (dispatch, getState) => {\n  const {\n    lastFetch\n  } = getState().items;\n  if (isOutdated(lastFetch)) {\n    dispatch(categoriesRequested());\n    try {\n      const {\n        content\n      } = await categoriesService.get();\n      dispatch(categoriesReceived(content));\n    } catch (error) {\n      dispatch(categoriesRequestFiled(error.message));\n    }\n  }\n};\nexport const addCategory = newData => async dispatch => {\n  dispatch(categoryCreateRequested());\n  try {\n    const {\n      content\n    } = await categoriesService.post(newData);\n    dispatch(categoryCreateReceived(content));\n  } catch (error) {\n    dispatch(categoryCreateRequestFailed(error.message));\n  }\n};\nexport const updateCategory = newData => async dispatch => {\n  dispatch(categoryUpdateRequest());\n  try {\n    const {\n      content\n    } = await categoriesService.patch(newData);\n    dispatch(categoryUpdateReceived(content));\n  } catch (error) {\n    dispatch(categoryUpdateRequestFailed(error.message));\n  }\n};\nexport const deleteCategory = id => async dispatch => {\n  dispatch(categoryDeleteRequested());\n  try {\n    await categoriesService.delete(id);\n    dispatch(categoryDeleted(id));\n  } catch (error) {\n    dispatch(categoryDeleteRequestFailed(error.message));\n  }\n};\nexport const getCategories = () => state => state.categories.entities;\nexport const getCategoriesLoadingStatus = () => state => state.categories.isLoading;\nexport const getCategoriesByIds = categoriesIds => state => {\n  if (state.categories.entities) {\n    const categoriesArray = [];\n    for (const categoryId of categoriesIds) {\n      for (const category of state.categories.entities) {\n        if (category._id === categoryId) {\n          categoriesArray.push(category);\n          break;\n        }\n      }\n    }\n    return categoriesArray;\n  }\n  return [];\n};\nexport default categoriesReducer;","map":{"version":3,"names":["createSlice","isOutdated","categoriesService","itemsService","categoriesSlice","name","initialState","entities","isLoading","error","lastFetch","reducers","categoriesRequested","state","categoriesReceived","action","payload","Date","now","categoriesRequestFiled","categoryUpdateRequest","categoryUpdateReceived","index","findIndex","i","_id","categoryUpdateRequestFailed","categoryDeleteRequested","categoryDeleted","filter","categoryDeleteRequestFailed","categoryCreateRequested","categoryCreateReceived","Array","isArray","push","categoryCreateRequestFailed","reducer","categoriesReducer","actions","loadCategoriesList","dispatch","getState","items","content","get","message","addCategory","newData","post","updateCategory","patch","deleteCategory","id","delete","getCategories","categories","getCategoriesLoadingStatus","getCategoriesByIds","categoriesIds","categoriesArray","categoryId","category"],"sources":["/Users/dariabrusnitsina/Yandex.Disk.localized/Programming/Projects/react-e-commerce/client/src/store/categories.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport isOutdated from \"../utils/isOutdated\";\nimport categoriesService from \"../services/categories.service\";\nimport itemsService from \"../services/items.service\";\n\nconst categoriesSlice = createSlice({\n    name: \"categories\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null,\n        lastFetch: null\n    },\n    reducers: {\n        categoriesRequested: (state) => {\n            state.isLoading = true;\n        },\n        categoriesReceived: (state, action) => {\n            state.entities = action.payload;\n            state.lastFetch = Date.now();\n            state.isLoading = false;\n        },\n        categoriesRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        categoryUpdateRequest: (state) => {},\n        categoryUpdateReceived: (state, action) => {\n            const index = state.entities.findIndex(\n                (i) => i._id === action.payload._id\n            );\n            state.entities[index] = { ...state.entities[index], ...action.payload };\n        },\n        categoryUpdateRequestFailed: (state, action) => {\n            state.error = action.payload;\n        },\n        categoryDeleteRequested: (state) => {},\n        categoryDeleted: (state, action) => {\n            state.entities = state.entities.filter((i) => i._id !== action.payload);\n        },\n        categoryDeleteRequestFailed: (state, action) => {\n            state.error = action.payload;\n        },\n        categoryCreateRequested: (state) => {},\n        categoryCreateReceived: (state, action) => {\n            if (!Array.isArray(state.entities)) {\n                state.entities = [];\n            }\n            state.entities.push(action.payload);\n        },\n        categoryCreateRequestFailed: (state, action) => {\n            state.error = action.payload;\n        }\n    }\n});\n\nconst { reducer: categoriesReducer, actions } = categoriesSlice;\nconst { categoriesRequested,\n    categoriesReceived,\n    categoriesRequestFiled,\n    categoryUpdateRequest,\n    categoryUpdateReceived,\n    categoryUpdateRequestFailed,\n    categoryDeleteRequested,\n    categoryDeleted,\n    categoryDeleteRequestFailed,\n    categoryCreateRequested,\n    categoryCreateReceived,\n    categoryCreateRequestFailed\n    } = actions;\n\nexport const loadCategoriesList = () => async (dispatch, getState) => {\n    const { lastFetch } = getState().items;\n    if (isOutdated(lastFetch)) {\n        dispatch(categoriesRequested());\n        try {\n            const { content } = await categoriesService.get();\n            dispatch(categoriesReceived(content));\n        } catch (error) {\n            dispatch(categoriesRequestFiled(error.message));\n        }\n    }\n};\n\nexport const addCategory = (newData) => async (dispatch) => {\n    dispatch(categoryCreateRequested());\n    try {\n        const { content } = await categoriesService.post(newData);\n        dispatch(categoryCreateReceived(content));\n    } catch (error) {\n        dispatch(categoryCreateRequestFailed(error.message));\n    }\n};\n\nexport const updateCategory = (newData) => async (dispatch) => {\n    dispatch(categoryUpdateRequest());\n    try {\n        const { content } = await categoriesService.patch(newData);\n        dispatch(categoryUpdateReceived(content));\n    } catch (error) {\n        dispatch(categoryUpdateRequestFailed(error.message));\n    }\n};\n\nexport const deleteCategory = (id) => async (dispatch) => {\n    dispatch(categoryDeleteRequested());\n    try {\n        await categoriesService.delete(id);\n        dispatch(categoryDeleted(id));\n    } catch (error) {\n        dispatch(categoryDeleteRequestFailed(error.message));\n    }\n};\n\nexport const getCategories= () => (state) => state.categories.entities;\nexport const getCategoriesLoadingStatus = () => (state) =>\n    state.categories.isLoading;\nexport const getCategoriesByIds = (categoriesIds) => (state) => {\n    if (state.categories.entities) {\n        const categoriesArray = [];\n        for (const categoryId of categoriesIds) {\n            for (const category of state.categories.entities) {\n                if (category._id === categoryId) {\n                    categoriesArray.push(category);\n                    break;\n                }\n            }\n        }\n        return categoriesArray;\n    }\n    return [];\n};\n\nexport default categoriesReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}