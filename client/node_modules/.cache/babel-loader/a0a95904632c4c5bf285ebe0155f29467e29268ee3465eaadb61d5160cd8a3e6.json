{"ast":null,"code":"var _jsxFileName = \"/Users/dariabrusnitsina/Yandex.Disk.localized/Programming/Projects/react-e-commerce/client/src/components/ui/loginForm.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nif (!values.email) {\n  errors.email = 'Required';\n} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n  errors.email = 'Invalid email address';\n}\nconst SignupForm = () => {\n  _s();\n  // Note that we have to initialize ALL of fields with values. These\n  // could come from props, but since we don’t want to prefill this form,\n  // we just use an empty string. If we don’t do this, React will yell\n  // at us.\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: ''\n    },\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"firstName\",\n      children: \"First Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"firstName\",\n      name: \"firstName\",\n      type: \"text\",\n      onChange: formik.handleChange,\n      value: formik.values.firstName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"lastName\",\n      children: \"Last Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"lastName\",\n      name: \"lastName\",\n      type: \"text\",\n      onChange: formik.handleChange,\n      value: formik.values.lastName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"email\",\n      children: \"Email Address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"email\",\n      name: \"email\",\n      type: \"email\",\n      onChange: formik.handleChange,\n      value: formik.values.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(SignupForm, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", true);\n_c = SignupForm;\nvar _c;\n$RefreshReg$(_c, \"SignupForm\");","map":{"version":3,"names":["React","Formik","Form","Field","values","email","errors","test","SignupForm","formik","useFormik","initialValues","firstName","lastName","onSubmit","alert","JSON","stringify","handleSubmit","handleChange"],"sources":["/Users/dariabrusnitsina/Yandex.Disk.localized/Programming/Projects/react-e-commerce/client/src/components/ui/loginForm.jsx"],"sourcesContent":["import React from \"react\";\nimport { Formik, Form, Field } from \"formik\";\n\nif (!values.email) {\n    errors.email = 'Required';\n} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n}\n\nconst SignupForm = () => {\n    // Note that we have to initialize ALL of fields with values. These\n    // could come from props, but since we don’t want to prefill this form,\n    // we just use an empty string. If we don’t do this, React will yell\n    // at us.\n    const formik = useFormik({\n        initialValues: {\n            firstName: '',\n            lastName: '',\n            email: '',\n        },\n        onSubmit: values => {\n            alert(JSON.stringify(values, null, 2));\n        },\n    });\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <label htmlFor=\"firstName\">First Name</label>\n            <input\n                id=\"firstName\"\n                name=\"firstName\"\n                type=\"text\"\n                onChange={formik.handleChange}\n                value={formik.values.firstName}\n            />\n\n            <label htmlFor=\"lastName\">Last Name</label>\n            <input\n                id=\"lastName\"\n                name=\"lastName\"\n                type=\"text\"\n                onChange={formik.handleChange}\n                value={formik.values.lastName}\n            />\n\n            <label htmlFor=\"email\">Email Address</label>\n            <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                onChange={formik.handleChange}\n                value={formik.values.email}\n            />\n\n            <button type=\"submit\">Submit</button>\n        </form>\n    );\n};"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,IAAI,EAAEC,KAAK,QAAQ,QAAQ;AAAC;AAE7C,IAAI,CAACC,MAAM,CAACC,KAAK,EAAE;EACfC,MAAM,CAACD,KAAK,GAAG,UAAU;AAC7B,CAAC,MAAM,IAAI,CAAC,2CAA2C,CAACE,IAAI,CAACH,MAAM,CAACC,KAAK,CAAC,EAAE;EACxEC,MAAM,CAACD,KAAK,GAAG,uBAAuB;AAC1C;AAEA,MAAMG,UAAU,GAAG,MAAM;EAAA;EACrB;EACA;EACA;EACA;EACA,MAAMC,MAAM,GAAGC,SAAS,CAAC;IACrBC,aAAa,EAAE;MACXC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZR,KAAK,EAAE;IACX,CAAC;IACDS,QAAQ,EAAEV,MAAM,IAAI;MAChBW,KAAK,CAACC,IAAI,CAACC,SAAS,CAACb,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC1C;EACJ,CAAC,CAAC;EACF,oBACI;IAAM,QAAQ,EAAEK,MAAM,CAACS,YAAa;IAAA,wBAChC;MAAO,OAAO,EAAC,WAAW;MAAA,UAAC;IAAU;MAAA;MAAA;MAAA;IAAA,QAAQ,eAC7C;MACI,EAAE,EAAC,WAAW;MACd,IAAI,EAAC,WAAW;MAChB,IAAI,EAAC,MAAM;MACX,QAAQ,EAAET,MAAM,CAACU,YAAa;MAC9B,KAAK,EAAEV,MAAM,CAACL,MAAM,CAACQ;IAAU;MAAA;MAAA;MAAA;IAAA,QACjC,eAEF;MAAO,OAAO,EAAC,UAAU;MAAA,UAAC;IAAS;MAAA;MAAA;MAAA;IAAA,QAAQ,eAC3C;MACI,EAAE,EAAC,UAAU;MACb,IAAI,EAAC,UAAU;MACf,IAAI,EAAC,MAAM;MACX,QAAQ,EAAEH,MAAM,CAACU,YAAa;MAC9B,KAAK,EAAEV,MAAM,CAACL,MAAM,CAACS;IAAS;MAAA;MAAA;MAAA;IAAA,QAChC,eAEF;MAAO,OAAO,EAAC,OAAO;MAAA,UAAC;IAAa;MAAA;MAAA;MAAA;IAAA,QAAQ,eAC5C;MACI,EAAE,EAAC,OAAO;MACV,IAAI,EAAC,OAAO;MACZ,IAAI,EAAC,OAAO;MACZ,QAAQ,EAAEJ,MAAM,CAACU,YAAa;MAC9B,KAAK,EAAEV,MAAM,CAACL,MAAM,CAACC;IAAM;MAAA;MAAA;MAAA;IAAA,QAC7B,eAEF;MAAQ,IAAI,EAAC,QAAQ;MAAA,UAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QAClC;AAEf,CAAC;AAAC,GA/CIG,UAAU;AAAA,KAAVA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}