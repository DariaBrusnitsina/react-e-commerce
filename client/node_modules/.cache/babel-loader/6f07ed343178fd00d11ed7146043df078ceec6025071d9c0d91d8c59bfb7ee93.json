{"ast":null,"code":"import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport userService from \"../services/user.service\";\nimport authService from \"../services/auth.service\";\nimport localStorageService from \"../services/localStorage.service\";\nimport history from \"../utils/history\";\nimport generateAuthError from \"../utils/generateAuthError\";\nimport { useNavigate } from \"react-router-dom\";\nconst initialState = localStorageService.getAccessToken() ? {\n  entities: null,\n  isLoading: true,\n  error: null,\n  auth: {\n    userId: localStorageService.getUserId()\n  },\n  isLoggedIn: true,\n  dataLoaded: false\n} : {\n  entities: null,\n  isLoading: false,\n  error: null,\n  auth: null,\n  isLoggedIn: false,\n  dataLoaded: false\n};\nconst usersSlice = createSlice({\n  name: \"users\",\n  initialState,\n  reducers: {\n    usersRequested: state => {\n      state.isLoading = true;\n    },\n    usersReceived: (state, action) => {\n      state.entities = action.payload;\n      state.dataLoaded = true;\n      state.isLoading = false;\n    },\n    usersRequestFailed: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    },\n    authRequestSuccess: (state, action) => {\n      state.auth = action.payload;\n      state.isLoggedIn = true;\n    },\n    authRequestFailed: (state, action) => {\n      state.error = action.payload;\n    },\n    userCreated: (state, action) => {\n      if (!Array.isArray(state.entities)) {\n        state.entities = [];\n      }\n      state.entities.push(action.payload);\n    },\n    userLoggedOut: state => {\n      state.entities = null;\n      state.isLoggedIn = false;\n      state.auth = null;\n      state.dataLoaded = false;\n    },\n    userUpdateRequest: state => {},\n    userUpdateReceived: (state, action) => {\n      const index = state.entities.findIndex(i => i._id === action.payload._id);\n      state.entities[index] = {\n        ...state.entities[index],\n        ...action.payload\n      };\n    },\n    userUpdateRequestFailed: (state, action) => {\n      state.error = action.payload;\n    },\n    authRequested: state => {\n      state.error = null;\n    }\n  }\n});\nconst {\n  reducer: usersReducer,\n  actions\n} = usersSlice;\nconst {\n  usersRequested,\n  usersReceived,\n  usersRequestFailed,\n  authRequestSuccess,\n  authRequestFailed,\n  userCreated,\n  userLoggedOut,\n  userUpdateSuccessed\n} = actions;\nconst authRequested = createAction(\"users/authRequested\");\nconst userCreateRequested = createAction(\"users/userCreateRequested\");\nconst createUserFailed = createAction(\"users/createUserFailed\");\nconst userUpdateRequested = createAction(\"users/userUpdateRequested\");\nconst userUpdateFailed = createAction(\"users/userUpdateFailed\");\nconst removeUserRequested = createAction(\"comments/removeUserRequested\");\nexport const login = _ref => {\n  let {\n    payload\n  } = _ref;\n  return async dispatch => {\n    const {\n      email,\n      password\n    } = payload;\n    dispatch(authRequested());\n    try {\n      const data = await authService.login({\n        email,\n        password\n      });\n      localStorageService.setTokens(data);\n      dispatch(authRequestSuccess({\n        userId: data.userId\n      }));\n    } catch (error) {\n      const {\n        code,\n        message\n      } = error.response.data.error;\n      if (code === 400) {\n        const errorMessage = generateAuthError(message);\n        dispatch(authRequestFailed(errorMessage));\n      } else {\n        dispatch(authRequestFailed(error.message));\n      }\n    }\n  };\n};\nexport const signUp = payload => async dispatch => {\n  dispatch(authRequested());\n  try {\n    const data = await authService.register(payload);\n    localStorageService.setTokens(data);\n    dispatch(authRequestSuccess({\n      userId: data.userId\n    }));\n  } catch (error) {\n    const {\n      code,\n      message\n    } = error.response.data.error;\n    console.log(message);\n    if (code === 400) {\n      const errorMessage = generateAuthError(message);\n      dispatch(authRequestFailed(errorMessage));\n    } else {\n      dispatch(authRequestFailed(error.message));\n    }\n  }\n};\nexport const logOut = () => dispatch => {\n  localStorageService.removeAuthData();\n  dispatch(userLoggedOut());\n};\nexport const updateUserData = payload => async dispatch => {\n  dispatch(userUpdateRequested());\n  try {\n    const {\n      content\n    } = await userService.update(payload);\n    console.log(content);\n    dispatch(userUpdateSuccessed(content));\n  } catch (error) {\n    dispatch(userUpdateFailed(error.message));\n  }\n};\nexport const removeUser = userId => async dispatch => {\n  dispatch(removeUserRequested());\n  try {\n    const {\n      content\n    } = await userService.removeUser(userId);\n    if (content === null) {\n      dispatch(usersReceived(userId));\n    }\n  } catch (error) {\n    dispatch(usersRequestFailed(error.message));\n  }\n};\nexport const loadUsersList = () => async dispatch => {\n  dispatch(usersRequested());\n  try {\n    const {\n      content\n    } = await userService.get();\n    dispatch(usersReceived(content));\n  } catch (error) {\n    dispatch(usersRequestFailed(error.message));\n  }\n};\nexport const getUsersList = () => state => state.users.entities;\nexport const getCurrentUserData = () => state => {\n  return state.users.entities ? state.users.entities.find(u => u._id === state.users.auth.userId) : null;\n};\nexport const getUserById = userId => state => {\n  if (state.users.entities) {\n    return state.users.entities.find(u => u._id === userId);\n  }\n};\nexport const getIsLoggedIn = () => state => state.users.isLoggedIn;\nexport const getDataStatus = () => state => state.users.dataLoaded;\nexport const getUsersLoadingStatus = () => state => state.users.isLoading;\nexport const getCurrentUserId = () => state => state.users.auth.userId;\nexport const getAuthError = () => state => state.users.error;\nexport default usersReducer;","map":{"version":3,"names":["createAction","createSlice","userService","authService","localStorageService","history","generateAuthError","useNavigate","initialState","getAccessToken","entities","isLoading","error","auth","userId","getUserId","isLoggedIn","dataLoaded","usersSlice","name","reducers","usersRequested","state","usersReceived","action","payload","usersRequestFailed","authRequestSuccess","authRequestFailed","userCreated","Array","isArray","push","userLoggedOut","userUpdateRequest","userUpdateReceived","index","findIndex","i","_id","userUpdateRequestFailed","authRequested","reducer","usersReducer","actions","userUpdateSuccessed","userCreateRequested","createUserFailed","userUpdateRequested","userUpdateFailed","removeUserRequested","login","dispatch","email","password","data","setTokens","code","message","response","errorMessage","signUp","register","console","log","logOut","removeAuthData","updateUserData","content","update","removeUser","loadUsersList","get","getUsersList","users","getCurrentUserData","find","u","getUserById","getIsLoggedIn","getDataStatus","getUsersLoadingStatus","getCurrentUserId","getAuthError"],"sources":["/Users/dariabrusnitsina/Yandex.Disk.localized/Programming/Projects/react-e-commerce/client/src/store/users.js"],"sourcesContent":["import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport userService from \"../services/user.service\";\nimport authService from \"../services/auth.service\";\nimport localStorageService from \"../services/localStorage.service\";\nimport history from \"../utils/history\";\nimport generateAuthError from \"../utils/generateAuthError\";\nimport {useNavigate} from \"react-router-dom\";\n\nconst initialState = localStorageService.getAccessToken()\n    ? {\n        entities: null,\n        isLoading: true,\n        error: null,\n        auth: { userId: localStorageService.getUserId() },\n        isLoggedIn: true,\n        dataLoaded: false\n    }\n    : {\n        entities: null,\n        isLoading: false,\n        error: null,\n        auth: null,\n        isLoggedIn: false,\n        dataLoaded: false\n    };\n\nconst usersSlice = createSlice({\n    name: \"users\",\n    initialState,\n    reducers: {\n        usersRequested: (state) => {\n            state.isLoading = true;\n        },\n        usersReceived: (state, action) => {\n            state.entities = action.payload;\n            state.dataLoaded = true;\n            state.isLoading = false;\n        },\n        usersRequestFailed: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        authRequestSuccess: (state, action) => {\n            state.auth = action.payload;\n            state.isLoggedIn = true;\n        },\n        authRequestFailed: (state, action) => {\n            state.error = action.payload;\n        },\n        userCreated: (state, action) => {\n            if (!Array.isArray(state.entities)) {\n                state.entities = [];\n            }\n            state.entities.push(action.payload);\n        },\n        userLoggedOut: (state) => {\n            state.entities = null;\n            state.isLoggedIn = false;\n            state.auth = null;\n            state.dataLoaded = false;\n        },\n        userUpdateRequest: (state) => {},\n        userUpdateReceived: (state, action) => {\n            const index = state.entities.findIndex(\n                (i) => i._id === action.payload._id\n            );\n            state.entities[index] = { ...state.entities[index], ...action.payload };\n        },\n        userUpdateRequestFailed: (state, action) => {\n            state.error = action.payload;\n        },\n        authRequested: (state) => {\n            state.error = null;\n        }\n    }\n});\n\nconst { reducer: usersReducer, actions } = usersSlice;\nconst {\n    usersRequested,\n    usersReceived,\n    usersRequestFailed,\n    authRequestSuccess,\n    authRequestFailed,\n    userCreated,\n    userLoggedOut,\n    userUpdateSuccessed\n} = actions;\n\nconst authRequested = createAction(\"users/authRequested\");\nconst userCreateRequested = createAction(\"users/userCreateRequested\");\nconst createUserFailed = createAction(\"users/createUserFailed\");\nconst userUpdateRequested = createAction(\"users/userUpdateRequested\");\nconst userUpdateFailed = createAction(\"users/userUpdateFailed\");\nconst removeUserRequested = createAction(\"comments/removeUserRequested\");\n\nexport const login =\n    ({ payload }) =>\n        async (dispatch) => {\n            const { email, password } = payload;\n            dispatch(authRequested());\n            try {\n                const data = await authService.login({ email, password });\n                localStorageService.setTokens(data);\n                dispatch(authRequestSuccess({ userId: data.userId }));\n            } catch (error) {\n                const { code, message } = error.response.data.error;\n                if (code === 400) {\n                    const errorMessage = generateAuthError(message);\n                    dispatch(authRequestFailed(errorMessage));\n                } else {\n                    dispatch(authRequestFailed(error.message));\n                }\n            }\n        };\n\nexport const signUp = (payload) =>\n        async (dispatch) => {\n            dispatch(authRequested());\n            try {\n                const data = await authService.register(payload);\n                localStorageService.setTokens(data);\n                dispatch(authRequestSuccess({ userId: data.userId }));\n\n            } catch (error) {\n                const { code, message } = error.response.data.error;\n                console.log(message)\n                if (code === 400) {\n                    const errorMessage = generateAuthError(message);\n                    dispatch(authRequestFailed(errorMessage));\n                } else {\n                    dispatch(authRequestFailed(error.message));\n                }\n            }\n        };\n\nexport const logOut = () => (dispatch) => {\n    localStorageService.removeAuthData();\n    dispatch(userLoggedOut());\n};\n\nexport const updateUserData = (payload) => async (dispatch) => {\n    dispatch(userUpdateRequested());\n    try {\n        const { content } = await userService.update(payload);\n        console.log(content)\n        dispatch(userUpdateSuccessed(content));\n    } catch (error) {\n        dispatch(userUpdateFailed(error.message));\n    }\n};\n\nexport const removeUser = (userId) => async (dispatch) => {\n    dispatch(removeUserRequested());\n    try {\n        const { content } = await userService.removeUser(userId);\n        if (content === null) {\n            dispatch(usersReceived(userId));\n        }\n    } catch (error) {\n        dispatch(usersRequestFailed(error.message));\n    }\n};\n\nexport const loadUsersList = () => async (dispatch) => {\n    dispatch(usersRequested());\n    try {\n        const { content } = await userService.get();\n        dispatch(usersReceived(content));\n    } catch (error) {\n        dispatch(usersRequestFailed(error.message));\n    }\n};\n\nexport const getUsersList = () => (state) => state.users.entities;\nexport const getCurrentUserData = () => (state) => {\n    return state.users.entities\n        ? state.users.entities.find((u) => u._id === state.users.auth.userId)\n        : null;\n};\nexport const getUserById = (userId) => (state) => {\n    if (state.users.entities) {\n        return state.users.entities.find((u) => u._id === userId);\n    }\n};\n\nexport const getIsLoggedIn = () => (state) => state.users.isLoggedIn;\nexport const getDataStatus = () => (state) => state.users.dataLoaded;\nexport const getUsersLoadingStatus = () => (state) => state.users.isLoading;\nexport const getCurrentUserId = () => (state) => state.users.auth.userId;\nexport const getAuthError = () => (state) => state.users.error;\n\nexport default usersReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}