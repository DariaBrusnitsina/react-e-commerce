{"ast":null,"code":"import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport itemsService from \"../services/items.service\";\nimport isOutdated from \"../utils/isOutdated\";\nimport userService from \"../services/user.service\";\nconst itemsSlice = createSlice({\n  name: \"items\",\n  initialState: {\n    entities: null,\n    isLoading: true,\n    error: null,\n    lastFetch: null\n  },\n  reducers: {\n    itemsRequested: state => {\n      state.isLoading = true;\n    },\n    itemsReceived: (state, action) => {\n      state.entities = action.payload;\n      state.lastFetch = Date.now();\n      state.isLoading = false;\n    },\n    itemsRequestFiled: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    },\n    itemsUpdateRequest: state => {},\n    itemsUpdateReceived: (state, action) => {\n      const index = state.entities.findIndex(i => i._id === action.payload._id);\n      state.entities[index] = {\n        ...state.entities[index],\n        ...action.payload\n      };\n    },\n    itemsUpdateRequestFailed: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n});\nconst {\n  reducer: itemsReducer,\n  actions\n} = itemsSlice;\nconst {\n  itemsRequested,\n  itemsReceived,\n  itemsRequestFiled,\n  itemsUpdateRequest,\n  itemsUpdateReceived,\n  itemsUpdateRequestFailed\n} = actions;\nexport const loadItemsList = () => async (dispatch, getState) => {\n  const {\n    lastFetch\n  } = getState().items;\n  if (isOutdated(lastFetch)) {\n    dispatch(itemsRequested());\n    try {\n      const {\n        content\n      } = await itemsService.get();\n      dispatch(itemsReceived(content));\n    } catch (error) {\n      dispatch(itemsRequestFiled(error.message));\n    }\n  }\n};\nexport const updateItem = newData => async dispatch => {\n  dispatch(itemsUpdateRequest());\n  try {\n    const {\n      content\n    } = await itemsService.patch(newData);\n    dispatch(itemsUpdateReceived(content));\n  } catch (error) {\n    dispatch(itemsUpdateRequestFailed(error.message));\n  }\n};\nexport const getItems = () => state => state.items.entities;\nexport const getItemsLoadingStatus = () => state => state.items.isLoading;\nexport const getItemById = itemId => state => {\n  console.log(state.items);\n  if (state.items.entities) {\n    return state.items.entities.find(u => u._id === itemId);\n  }\n};\nexport const getItemsByIds = itemsIds => state => {\n  if (state.items.entities) {\n    const itemsArray = [];\n    for (const itemId of itemsIds) {\n      for (const item of state.items.entities) {\n        if (item._id === itemId) {\n          itemsArray.push(item);\n          break;\n        }\n      }\n    }\n    return itemsArray;\n  }\n  return [];\n};\nexport default itemsReducer;","map":{"version":3,"names":["createAction","createSlice","itemsService","isOutdated","userService","itemsSlice","name","initialState","entities","isLoading","error","lastFetch","reducers","itemsRequested","state","itemsReceived","action","payload","Date","now","itemsRequestFiled","itemsUpdateRequest","itemsUpdateReceived","index","findIndex","i","_id","itemsUpdateRequestFailed","reducer","itemsReducer","actions","loadItemsList","dispatch","getState","items","content","get","message","updateItem","newData","patch","getItems","getItemsLoadingStatus","getItemById","itemId","console","log","find","u","getItemsByIds","itemsIds","itemsArray","item","push"],"sources":["/Users/dariabrusnitsina/Yandex.Disk.localized/Programming/Projects/react-e-commerce/client/src/store/items.js"],"sourcesContent":["import {createAction, createSlice} from \"@reduxjs/toolkit\";\nimport itemsService from \"../services/items.service\";\nimport isOutdated from \"../utils/isOutdated\";\nimport userService from \"../services/user.service\";\n\nconst itemsSlice = createSlice({\n    name: \"items\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null,\n        lastFetch: null\n    },\n    reducers: {\n        itemsRequested: (state) => {\n            state.isLoading = true;\n        },\n        itemsReceived: (state, action) => {\n            state.entities = action.payload;\n            state.lastFetch = Date.now();\n            state.isLoading = false;\n        },\n        itemsRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        itemsUpdateRequest: (state) => {},\n        itemsUpdateReceived: (state, action) => {\n            const index = state.entities.findIndex(\n                (i) => i._id === action.payload._id\n            );\n            state.entities[index] = { ...state.entities[index], ...action.payload };\n        },\n        itemsUpdateRequestFailed: (state, action) => {\n            state.error = action.payload;\n        },\n    }\n});\n\nconst { reducer: itemsReducer, actions } = itemsSlice;\nconst { itemsRequested, itemsReceived, itemsRequestFiled, itemsUpdateRequest,itemsUpdateReceived,itemsUpdateRequestFailed  } = actions;\n\nexport const loadItemsList = () => async (dispatch, getState) => {\n    const { lastFetch } = getState().items;\n    if (isOutdated(lastFetch)) {\n        dispatch(itemsRequested());\n        try {\n            const { content } = await itemsService.get();\n            dispatch(itemsReceived(content));\n        } catch (error) {\n            dispatch(itemsRequestFiled(error.message));\n        }\n    }\n};\n\nexport const updateItem = (newData) => async (dispatch) => {\n    dispatch(itemsUpdateRequest());\n    try {\n        const { content } = await itemsService.patch(newData);\n        dispatch(itemsUpdateReceived(content));\n    } catch (error) {\n        dispatch(itemsUpdateRequestFailed(error.message));\n    }\n};\n\nexport const getItems = () => (state) => state.items.entities;\nexport const getItemsLoadingStatus = () => (state) =>\n    state.items.isLoading;\n\nexport const getItemById = (itemId) => (state) => {\n    console.log(state.items)\n    if (state.items.entities) {\n        return state.items.entities.find((u) => u._id === itemId);\n    }\n};\n\nexport const getItemsByIds = (itemsIds) => (state) => {\n    if (state.items.entities) {\n        const itemsArray = [];\n        for (const itemId of itemsIds) {\n            for (const item of state.items.entities) {\n                if (item._id === itemId) {\n                    itemsArray.push(item);\n                    break;\n                }\n            }\n        }\n        return itemsArray;\n    }\n    return [];\n};\n\nexport default itemsReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}