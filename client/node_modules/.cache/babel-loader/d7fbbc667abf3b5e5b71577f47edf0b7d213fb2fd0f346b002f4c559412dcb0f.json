{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport itemsService from \"../services/items.service\";\nimport isOutdated from \"../utils/isOutdated\";\nconst itemsSlice = createSlice({\n  name: \"items\",\n  initialState: {\n    entities: null,\n    isLoading: true,\n    error: null,\n    lastFetch: null\n  },\n  reducers: {\n    itemsRequested: state => {\n      state.isLoading = true;\n    },\n    itemsReceived: (state, action) => {\n      state.entities = action.payload;\n      state.lastFetch = Date.now();\n      state.isLoading = false;\n    },\n    itemsRequestFiled: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    }\n  }\n});\nconst {\n  reducer: itemsReducer,\n  actions\n} = itemsSlice;\nconst {\n  itemsRequested,\n  itemsReceived,\n  itemsRequestFiled\n} = actions;\nexport const loadItemsList = () => async (dispatch, getState) => {\n  const {\n    lastFetch\n  } = getState().items;\n  if (isOutdated(lastFetch)) {\n    dispatch(itemsRequested());\n    try {\n      const {\n        content\n      } = await itemsService.fetchAll();\n      dispatch(itemsReceived(content));\n    } catch (error) {\n      dispatch(itemsRequestFiled(error.message));\n    }\n  }\n};\nexport const getItems = () => state => state;\nexport const getItemsLoadingStatus = () => state => state.items.isLoading;\nexport const getItemsByIds = itemsIds => state => {\n  if (state.items.entities) {\n    const itemsArray = [];\n    for (const itemId of itemsIds) {\n      for (const item of state.items.entities) {\n        if (item._id === itemId) {\n          itemsArray.push(item);\n          break;\n        }\n      }\n    }\n    return itemsArray;\n  }\n  return [];\n};\nexport default itemsReducer;","map":{"version":3,"names":["createSlice","itemsService","isOutdated","itemsSlice","name","initialState","entities","isLoading","error","lastFetch","reducers","itemsRequested","state","itemsReceived","action","payload","Date","now","itemsRequestFiled","reducer","itemsReducer","actions","loadItemsList","dispatch","getState","items","content","fetchAll","message","getItems","getItemsLoadingStatus","getItemsByIds","itemsIds","itemsArray","itemId","item","_id","push"],"sources":["/Users/dariabrusnitsina/Yandex.Disk.localized/Programming/Projects/react-e-commerce/client/src/store/items.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport itemsService from \"../services/items.service\";\nimport isOutdated from \"../utils/isOutdated\";\n\nconst itemsSlice = createSlice({\n    name: \"items\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null,\n        lastFetch: null\n    },\n    reducers: {\n        itemsRequested: (state) => {\n            state.isLoading = true;\n        },\n        itemsReceived: (state, action) => {\n            state.entities = action.payload;\n            state.lastFetch = Date.now();\n            state.isLoading = false;\n        },\n        itemsRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        }\n    }\n});\n\nconst { reducer: itemsReducer, actions } = itemsSlice;\nconst { itemsRequested, itemsReceived, itemsRequestFiled } = actions;\n\nexport const loadItemsList = () => async (dispatch, getState) => {\n    const { lastFetch } = getState().items;\n    if (isOutdated(lastFetch)) {\n        dispatch(itemsRequested());\n        try {\n            const { content } = await itemsService.fetchAll();\n            dispatch(itemsReceived(content));\n        } catch (error) {\n            dispatch(itemsRequestFiled(error.message));\n        }\n    }\n};\n\nexport const getItems = () => (state) => state\nexport const getItemsLoadingStatus = () => (state) =>\n    state.items.isLoading;\nexport const getItemsByIds = (itemsIds) => (state) => {\n    if (state.items.entities) {\n        const itemsArray = [];\n        for (const itemId of itemsIds) {\n            for (const item of state.items.entities) {\n                if (item._id === itemId) {\n                    itemsArray.push(item);\n                    break;\n                }\n            }\n        }\n        return itemsArray;\n    }\n    return [];\n};\n\nexport default itemsReducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,UAAU,MAAM,qBAAqB;AAE5C,MAAMC,UAAU,GAAGH,WAAW,CAAC;EAC3BI,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACVC,QAAQ,EAAE,IAAI;IACdC,SAAS,EAAE,IAAI;IACfC,KAAK,EAAE,IAAI;IACXC,SAAS,EAAE;EACf,CAAC;EACDC,QAAQ,EAAE;IACNC,cAAc,EAAGC,KAAK,IAAK;MACvBA,KAAK,CAACL,SAAS,GAAG,IAAI;IAC1B,CAAC;IACDM,aAAa,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC9BF,KAAK,CAACN,QAAQ,GAAGQ,MAAM,CAACC,OAAO;MAC/BH,KAAK,CAACH,SAAS,GAAGO,IAAI,CAACC,GAAG,EAAE;MAC5BL,KAAK,CAACL,SAAS,GAAG,KAAK;IAC3B,CAAC;IACDW,iBAAiB,EAAE,CAACN,KAAK,EAAEE,MAAM,KAAK;MAClCF,KAAK,CAACJ,KAAK,GAAGM,MAAM,CAACC,OAAO;MAC5BH,KAAK,CAACL,SAAS,GAAG,KAAK;IAC3B;EACJ;AACJ,CAAC,CAAC;AAEF,MAAM;EAAEY,OAAO,EAAEC,YAAY;EAAEC;AAAQ,CAAC,GAAGlB,UAAU;AACrD,MAAM;EAAEQ,cAAc;EAAEE,aAAa;EAAEK;AAAkB,CAAC,GAAGG,OAAO;AAEpE,OAAO,MAAMC,aAAa,GAAG,MAAM,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EAC7D,MAAM;IAAEf;EAAU,CAAC,GAAGe,QAAQ,EAAE,CAACC,KAAK;EACtC,IAAIvB,UAAU,CAACO,SAAS,CAAC,EAAE;IACvBc,QAAQ,CAACZ,cAAc,EAAE,CAAC;IAC1B,IAAI;MACA,MAAM;QAAEe;MAAQ,CAAC,GAAG,MAAMzB,YAAY,CAAC0B,QAAQ,EAAE;MACjDJ,QAAQ,CAACV,aAAa,CAACa,OAAO,CAAC,CAAC;IACpC,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACZe,QAAQ,CAACL,iBAAiB,CAACV,KAAK,CAACoB,OAAO,CAAC,CAAC;IAC9C;EACJ;AACJ,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,MAAOjB,KAAK,IAAKA,KAAK;AAC9C,OAAO,MAAMkB,qBAAqB,GAAG,MAAOlB,KAAK,IAC7CA,KAAK,CAACa,KAAK,CAAClB,SAAS;AACzB,OAAO,MAAMwB,aAAa,GAAIC,QAAQ,IAAMpB,KAAK,IAAK;EAClD,IAAIA,KAAK,CAACa,KAAK,CAACnB,QAAQ,EAAE;IACtB,MAAM2B,UAAU,GAAG,EAAE;IACrB,KAAK,MAAMC,MAAM,IAAIF,QAAQ,EAAE;MAC3B,KAAK,MAAMG,IAAI,IAAIvB,KAAK,CAACa,KAAK,CAACnB,QAAQ,EAAE;QACrC,IAAI6B,IAAI,CAACC,GAAG,KAAKF,MAAM,EAAE;UACrBD,UAAU,CAACI,IAAI,CAACF,IAAI,CAAC;UACrB;QACJ;MACJ;IACJ;IACA,OAAOF,UAAU;EACrB;EACA,OAAO,EAAE;AACb,CAAC;AAED,eAAeb,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}